package battle;

import javax.swing.Timer;

import entity.*;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
/**
 * Kelas model dari battle scene.
 */
public class Battle {
    /**
     * player.
     */
    private Player player;
    /**
     * enemy.
     */
    private Virtumon enemy;
    /**
     * view dari Battle.
     */
    private BattleView view;
    /**
     * command yang dipilih player.
     * 1 = normal attack, 2 = special attack, 3 = defense, 4 catch.
     */
    private int commandp;
    /**
     *  command yang randomly generated by enemy.
     *  1 = normal attack, 2 = special attack, 3 = defense.
     */
    private int commande;
    /**
     * timer.
     */
    private Timer timer;
    /**
     * Constructor.
     * @param _view view dari battle.
     * @param _player player.
     * @param _enemy virtumon yang dilawan.
     */
    public Battle(BattleView _view, Player _player, Virtumon _enemy) {
        player = _player;
        enemy = _enemy;
        view = _view;
        view.battleStatus = 0;
    }
    /**
     * Start battle.
     * @param cmd command yang dipilih player, 1 = normal attack, 2 = special attack, 3 = defense, 4 catch.
     */
    public void start(int cmd){
        if (player.getHp() > 0) {
            commandp = cmd;
            commande = generateRandomAttack();
            shoutPlayer(commandp);
            shoutVirtumon(commande);
            if ((commandp == 1 || commandp == 2) && (commande == 1 || commande == 2)) {
                attackToEnemyTimer(1500, false);
                attackToPlayerTimer(3000, true);
            }
            else
            if (commandp == 3 && commande == 3) {
                view.addLog("");
            }
            else
            if (commandp == 3 && commande == 1) {
                attackToPlayerTimer(1500, true);
            }
            else
            if (commandp == 1 && commande == 3) {
                attackToEnemyTimer(1500, true);
            }
            else
            if (commandp == 2 && commande == 3) {
                view.addLog("Your attack was blocked");
                view.addLog("");
            }
            else
            if (commandp == 3 && commande == 2) {
                view.addLog("You blocked an attack");
                view.addLog("");
            }
            else
            if (commandp == 4) {
                if (commande == 1 || commande == 2) {
                    catching(false);
                    attackToPlayerTimer(3000, true);
                }
                else {  //commandp == 4 && commande == 3
                    catching(true);
                }
            }
            else {	//commandp = 5
                if (commande == 1 || commande == 2) {
                    heal(false);
                    attackToPlayerTimer(3000, true);
                }
                else {  //commandp == 5 && commande == 3
                    heal(true);
                }
            }
        }
    }
    /**
     * Menyerang player dengan delay tertentu.
     * @param delay delay attack.
     * @param newline penanda apakah memberi tambahan newline di log
     */
    private void attackToPlayerTimer(int delay, boolean newline) {
        timer = new Timer(1500, new ActionListener() {
            public void actionPerformed(ActionEvent x) {
                attackToPlayer(commande);
                if (newline) {
                    view.addLog("");
                }
            }
        });
        timer.setInitialDelay(delay);
        timer.setRepeats(false);
        timer.start();
    }
    /**
     * Menyerang enemy dengan delay tertentu.
     * @param delay delay attack.
     * @param newline penanda apakah memberi tambahan newline di log
     */
    private void attackToEnemyTimer(int delay, boolean newline) {
        timer = new Timer(1500, new ActionListener() {
            public void actionPerformed(ActionEvent x) {
                attackToEnemy(commandp);
                if (newline) {
                    view.addLog("");
                }
            }
        });
        timer.setInitialDelay(delay);
        timer.setRepeats(false);
        timer.start();
    }
    /**
     * Merandom aksi 1-3 untuk enemy bot.
     * @return attackNumber.
     */
    private int generateRandomAttack() {
        Random random = new Random(System.nanoTime());
        int attackNumber = random.nextInt(3) + 1;
        return attackNumber;
    }
    /**
     * Menotifikasi aksi yang diambil virtumon.
     * @param attackNumber command.
     */
    private void shoutVirtumon(int attackNumber) {
        switch (attackNumber) {
            case 1:
                view.addLog("Virtumon attack with normal attack");
                break;
            case 2:
                view.addLog("Virtumon attack with special attack");
                break;
            case 3:
                view.addLog("Virtumon set up a defense position");
                break;
        }
    }
    /**
     * Menotifikasi aksi yang diambil player.
     * @param attackNumber command.
     */
    private void shoutPlayer(int attackNumber) {
        switch (attackNumber) {
            case 1:
                view.addLog("You attack with normal attack");
                break;
            case 2:
                view.addLog("You attack with special attack");
                break;
            case 3:
                view.addLog("You det up a defense position");
                break;
            case 4:
                view.addLog("You throw Virtuball");
                break;
            case 5 :
                view.addLog("You used medicine to heal yourself");
                break;
        }
    }
    /**
     * Menyerang player dengan menghitung damage dan mengurangi hp player.
     * @param attackNumber command.
     */
    private void attackToPlayer(int attackNumber) {
        if (view.battleStatus == 0) {
            int dmg = 0;
            switch (attackNumber) {
                case 1:
                    dmg = (int) (Math.round((enemy.getLevel() * 0.4 + 2) * 100 * enemy.getDamage() / (player.getDefense() * 50) + 2));
                    break;
                case 2:
                    dmg = (int) (Math.round((enemy.getLevel() * 0.4 + 2) * 300 * enemy.getDamage() / (player.getDefense() * 50) + 2));
                    break;
            }
            player.incHp((-1) * dmg);
            view.addLog("Enemy successfully attack!, HP - " + Integer.toString(dmg));
            if (player.getHp() <= 0) {
                lose();
            }
            view.playerhp.repaint();
            view.virtumonhp.repaint();
        }
    }
    /**
     * Menyerang enemy dengan menghitung damage dan mengurangi hp enemy.
     * @param attackNumber command.
     */
    private void attackToEnemy(int attackNumber) {
        int dmg = 0;
        switch (attackNumber) {
            case 1:
                dmg = (int) (Math.round((player.getlevel() * 0.4 + 2) * 100 * player.getAttack() / (enemy.getDefense() * 50) + 2));
                break;
            case 2:
                dmg = (int) (Math.round((player.getlevel() * 0.4 + 2) * 300 * player.getAttack() / (enemy.getDefense() * 50) + 2));
                break;
        }
        enemy.incHp(-1*dmg);
        view.addLog("Attack success!, enemy HP - " + Integer.toString(dmg));
        if (enemy.getHp() <= 0) {
            won();
        }
        view.playerhp.repaint();
        view.virtumonhp.repaint();
    }
    /**
     * Menampilkan pesan menang.
     */
    private void won() {
        view.addLog("Congratulation! you win");
        view.battleStatus = 1;
        player.incExp(enemy.getLevel() * 3);
    }
    /**
     * Menampilkan pesan kalah.
     */
    private void lose() {
        view.addLog("Aww, you're dead");
        view.battleStatus = 2;
    }
    /**
     * Menagtur mekanisme penangkapan pokemon.
     * @param newline penanda apakah memberi tambahan newline di log
     */
    public void catching(boolean newline) {
        int satu = 1;
        int seratus = 100;
        double percentageOfSuccess = ((double)satu - (double)enemy.getHp()/(double)enemy.getMaxHp())*(double)seratus;
        double hasilRandom = Math.random() * 100 + 1;
        timer = new Timer(1500, new ActionListener() {
            public void actionPerformed(ActionEvent x) {
                if (hasilRandom <= percentageOfSuccess) {      //berhasil menangkap pokemon
                    player.addVirtumon(enemy);
                    view.addLog("GOTCHA!! Virtumon was caught");
                    view.battleStatus = 3;
                    player.incExp(enemy.getLevel() * 2);
                }
                else {		//gagal menngkap virtumon
                    view.addLog("Virtumon got away");
                }
                if (newline) {
                    view.addLog("");
                }
            }
        });
        timer.setInitialDelay(1500);
        timer.setRepeats(false);
        timer.start();
    }
    /**
     * Menagtur mekanisme menggunakan medicine.
     * @param newline penanda apakah memberi tambahan newline di log
     */
    public void heal(boolean newline) {
        timer = new Timer(1500, new ActionListener() {
            public void actionPerformed(ActionEvent x) {
                if (player.getMedicine() <= 0) {      //tidak ada medicine
                    view.addLog("But you have used up all your medicine");
                }
                else if (player.getHp() == player.getMaxHp()){	//nyawa penuh
                    view.addLog("But your HP is full");
                }
                else {		//gagal menngkap virtumon
                    int curHP = player.getHp();
                    player.useMedicine();
                    view.addLog("Healed yourself HP + "+(player.getHp() - curHP));
                    view.repaint();
                }
                if (newline) {
                    view.addLog("");
                }
            }
        });
        timer.setInitialDelay(1500);
        timer.setRepeats(false);
        timer.start();
    }
}